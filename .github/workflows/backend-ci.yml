name: Backend CI

on:
  push:
    branches: [ main, develop ]
    paths: [ 'backend/**' ]
  pull_request:
    branches: [ main, develop ]
    paths: [ 'backend/**' ]

env:
  PYTHON_VERSION: "3.12"

jobs:
  # Job 1: Code Quality & Formatting (Fast - runs first)
  code-quality:
    name: "Code Quality & Formatting"
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        cd backend
        uv venv
        uv pip install -e .[dev]

    - name: Check basic file issues
      run: |
        cd backend
        echo "üîç Checking for trailing whitespace..."
        if grep -r '[[:space:]]$' . --include="*.py" --exclude-dir='.venv' --exclude-dir='venv' --exclude-dir='env'; then
          echo "‚ùå Found trailing whitespace"
          exit 1
        else
          echo "‚úÖ No trailing whitespace found"
        fi

        echo "üîç Checking files end with newline..."
        find . -name "*.py" -not -path "./.venv/*" -not -path "./venv/*" -not -path "./env/*" -exec sh -c 'if [ -n "$(tail -c1 "$1")" ]; then echo "File $1 does not end with newline"; exit 1; fi' _ {} \;
        echo "‚úÖ All files end with newline"

    - name: Run docformatter
      run: |
        cd backend
        echo "üìù Running docformatter..."
        uv run docformatter --check --wrap-summaries 79 --wrap-descriptions 79 --recursive . --exclude .venv venv env

    - name: Run black
      run: |
        cd backend
        echo "üé® Running black..."
        uv run black --check --line-length=79 . --exclude='/(\.venv|venv|env)/'

    - name: Run isort
      run: |
        cd backend
        echo "üìã Running isort..."
        uv run isort --check-only --line-length=79 . --skip-glob='*/.venv/*' --skip-glob='*/venv/*' --skip-glob='*/env/*'

    - name: Run flake8
      run: |
        cd backend
        echo "üîç Running flake8..."
        uv run flake8 . --exclude=.venv,venv,env,__pycache__,.git

  # Job 2: Type Checking (Can run in parallel with code-quality)
  type-checking:
    name: "Type Checking"
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Install dependencies with types
      run: |
        cd backend
        uv venv
        uv pip install -e .[dev]
        # Install additional type packages
        uv pip install "fastapi==0.115.9" "pydantic==2.11.5" "pydantic-settings==2.9.1" \
                       "sqlalchemy==2.0.41" "alembic==1.16.1" "langchain-openai==0.3.21" \
                       "langchain-community==0.3.24" "langchain==0.3.25" "email-validator==2.2.0" \
                       "python-multipart==0.0.20" "pytest==8.4.0" "tenacity==9.1.2" \
                       "aiofiles==24.1.0" "chromadb==1.0.12" "elasticsearch==8.18.1" \
                       "celery==5.5.3" types-setuptools types-python-jose types-passlib \
                       types-aiofiles "python-jose[cryptography]" "passlib[bcrypt]" numpy celery-types

    - name: Run mypy
      run: |
        cd backend
        echo "üîç Running mypy type checking..."
        uv run mypy app/ tests/ --exclude='(\.venv|venv|env)'

  # Job 3: Security Scanning (Can run in parallel)
  security:
    name: "Security Scanning"
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        cd backend
        uv venv
        uv pip install -e .[dev]

    - name: Run bandit security scan
      run: |
        cd backend
        echo "üîí Running bandit security scan..."
        uv run bandit -r . -f json -o bandit-report.json --exclude='./.venv,./venv,./env' -s B101

    - name: Upload bandit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-security-report
        path: backend/bandit-report.json

    - name: Run safety check
      run: |
        cd backend
        echo "üõ°Ô∏è Running safety check..."
        uv pip install safety
        uv run safety check --json --output safety-report.json || true

    - name: Upload safety report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: safety-report
        path: backend/safety-report.json

  # Job 4: Unit Tests (Requires quality checks to pass)
  unit-tests:
    name: "Unit Tests"
    runs-on: ubuntu-latest
    needs: [code-quality, type-checking]  # Wait for quality checks

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        cd backend
        uv venv
        uv pip install -e .[dev]

    - name: Check if tests exist
      id: check_tests
      run: |
        cd backend
        echo "üîç Checking for test files..."
        find . -name "test_*.py" -o -name "*_test.py" | head -10
        if find . -name "test_*.py" -not -path "./.venv/*" -not -path "./venv/*" -not -path "./env/*" | grep -q . || \
           find . -name "*_test.py" -not -path "./.venv/*" -not -path "./venv/*" -not -path "./env/*" | grep -q .; then
          echo "has_tests=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Found test files"
        else
          echo "has_tests=false" >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è No test files found"
        fi

    - name: Run unit tests
      if: steps.check_tests.outputs.has_tests == 'true'
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test-secret-key-for-ci
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        CHROMADB_PATH: ./test_chromadb
      run: |
        cd backend
        echo "üß™ Running unit tests..."
        uv run pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=term-missing --cov-report=html

    - name: Upload coverage reports
      if: steps.check_tests.outputs.has_tests == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: unit-test-coverage
        path: |
          backend/coverage.xml
          backend/htmlcov/

  # Job 5: Integration Tests (Requires unit tests to pass)
  integration-tests:
    name: "Integration Tests"
    runs-on: ubuntu-latest
    needs: [unit-tests]  # Wait for unit tests
    if: ${{ !cancelled() && needs.unit-tests.result == 'success' }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up uv
      uses: actions/checkout@v4

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        cd backend
        uv venv
        uv pip install -e .[dev]

    - name: Check if integration tests exist
      id: check_integration_tests
      run: |
        cd backend
        echo "üîç Checking for integration test files..."
        if find . -path "*/integration/*" -name "test_*.py" -not -path "./.venv/*" | grep -q . || \
           find . -name "*integration*test*.py" -not -path "./.venv/*" | grep -q .; then
          echo "has_integration_tests=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Found integration test files"
        else
          echo "has_integration_tests=false" >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è No integration test files found"
        fi

    - name: Run integration tests
      if: steps.check_integration_tests.outputs.has_integration_tests == 'true'
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test-secret-key-for-ci
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        CHROMADB_PATH: ./test_chromadb
        ELASTICSEARCH_URL: http://localhost:9200
      run: |
        cd backend
        echo "üîó Running integration tests..."
        uv run pytest tests/integration/ -v --cov=app --cov-append --cov-report=xml --cov-report=term-missing

    - name: Upload integration test results
      if: steps.check_integration_tests.outputs.has_integration_tests == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-coverage
        path: backend/coverage.xml

  # Job 6: Coverage Report (Combines all coverage data)
  coverage-report:
    name: "Coverage Report"
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: ${{ !cancelled() && (needs.unit-tests.result == 'success' || needs.integration-tests.result == 'success') }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download unit test coverage
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        name: unit-test-coverage
        path: backend/

    - name: Download integration test coverage
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        name: integration-test-coverage
        path: backend/

    - name: Coverage comment on PR
      uses: py-cov-action/python-coverage-comment-action@v3
      if: github.event_name == 'pull_request'
      with:
        GITHUB_TOKEN: ${{ github.token }}
        MINIMUM_GREEN: 80
        MINIMUM_ORANGE: 70
        COVERAGE_PATH: backend/coverage.xml

  # Job 7: Build Check (Optional - verify the application builds)
  build-check:
    name: "Build Check"
    runs-on: ubuntu-latest
    needs: [code-quality, type-checking]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        cd backend
        uv venv
        uv pip install -e .[dev]

    - name: Check app can start
      env:
        SECRET_KEY: test-secret-key
        DATABASE_URL: sqlite:///./test.db
      run: |
        cd backend
        echo "üöÄ Testing application startup..."
        timeout 30s uv run python -c "
        from app.main import app
        print('‚úÖ Application imports successfully')
        print(f'‚úÖ App title: {app.title}')
        print(f'‚úÖ App version: {app.version}')
        " || (echo "‚ùå Application failed to start" && exit 1)

name: Backend CI

on:
  push:
    branches: [ main, develop ]
    paths: [ 'backend/**' ]
  pull_request:
    branches: [ main, develop ]
    paths: [ 'backend/**' ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.11

    - name: Install dependencies
      run: |
        cd backend
        uv venv
        uv pip install -r requirements.txt
        uv pip install pytest pytest-asyncio pytest-cov black isort flake8 mypy bandit

    - name: Run linting
      run: |
        cd backend
        uv run black --check . --exclude='/(\.venv|venv|env)/'
        uv run isort --check-only . --skip-glob='*/.venv/*' --skip-glob='*/venv/*' --skip-glob='*/env/*'
        uv run flake8 . --exclude=.venv,venv,env,__pycache__,.git
        uv run mypy . --exclude='(\.venv|venv|env)'
        uv run bandit -r . -f json -o bandit-report.json --exclude='./.venv,./venv,./env'

    - name: Run tests with coverage
      run: |
        cd backend
        uv run pytest --cov=app --cov-report=xml --cov-report=term-missing --cov-fail-under=80

    - name: Coverage comment
      uses: py-cov-action/python-coverage-comment-action@v3
      if: github.event_name == 'pull_request'
      with:
        GITHUB_TOKEN: ${{ github.token }}
        MINIMUM_GREEN: 80
        MINIMUM_ORANGE: 70

name: Backend CI
on:
  push:
    branches: [ main, develop ]
    paths: [ 'backend/**' ]
  pull_request:
    branches: [ main, develop ]
    paths: [ 'backend/**' ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.12

    - name: Install dependencies
      run: |
        cd backend
        uv venv
        uv pip install -e .[dev]

    - name: Run pre-commit hooks
      run: |
        cd backend
        # Install pre-commit if not already available
        uv pip install pre-commit

        # Run autopep8 (formatting)
        uv run autopep8 --diff --max-line-length=79 --aggressive --aggressive --recursive . --exclude='.venv,venv,env'

        # Run docformatter (docstring formatting)
        uv run docformatter --check --wrap-summaries 79 --wrap-descriptions 79 --recursive . --exclude .venv venv env

        # Run black (code formatting)
        uv run black --check --line-length=79 . --exclude='/(\.venv|venv|env)/'

        # Run isort (import sorting)
        uv run isort --check-only --line-length=79 . --skip-glob='*/.venv/*' --skip-glob='*/venv/*' --skip-glob='*/env/*'

        # Run flake8 (linting)
        uv run flake8 . --exclude=.venv,venv,env,__pycache__,.git

        # Install additional type packages needed for mypy
        uv pip install types-python-jose types-passlib python-jose[cryptography] passlib[bcrypt]

        # Run mypy (type checking)
        uv pip install alembic types-setuptools
        uv run mypy app/ tests/ --exclude='(\.venv|venv|env)'

        # Run bandit (security linting)
        uv run bandit -r . -f json -o bandit-report.json --exclude='./.venv,./venv,./env' -s B101

    - name: Check basic file issues
      run: |
        cd backend
        # Check for trailing whitespace
        if grep -r '[[:space:]]$' . --include="*.py" --exclude-dir='.venv' --exclude-dir='venv' --exclude-dir='env'; then
          echo "❌ Found trailing whitespace"
          exit 1
        else
          echo "✅ No trailing whitespace found"
        fi

        # Check for files without final newline
        find . -name "*.py" -not -path "./.venv/*" -not -path "./venv/*" -not -path "./env/*" -exec sh -c 'if [ -n "$(tail -c1 "$1")" ]; then echo "File $1 does not end with newline"; exit 1; fi' _ {} \;
        echo "✅ All files end with newline"

    - name: Check if tests exist
      id: check_tests
      run: |
        cd backend
        echo "Checking for test files..."
        find . -name "test_*.py" -o -name "*_test.py" | head -10
        if find . -name "test_*.py" -not -path "./.venv/*" -not -path "./venv/*" -not -path "./env/*" | grep -q . || \
           find . -name "*_test.py" -not -path "./.venv/*" -not -path "./venv/*" -not -path "./env/*" | grep -q .; then
          echo "has_tests=true" >> $GITHUB_OUTPUT
          echo "Found test files"
        else
          echo "has_tests=false" >> $GITHUB_OUTPUT
          echo "No test files found"
        fi

    - name: Run tests with coverage
      if: steps.check_tests.outputs.has_tests == 'true'
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      run: |
        cd backend
        uv run pytest --cov=app --cov-report=xml --cov-report=term-missing --cov-fail-under=80

    - name: Upload coverage reports
      if: steps.check_tests.outputs.has_tests == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: backend/coverage.xml

    - name: Coverage comment
      uses: py-cov-action/python-coverage-comment-action@v3
      if: github.event_name == 'pull_request' && steps.check_tests.outputs.has_tests == 'true'
      with:
        GITHUB_TOKEN: ${{ github.token }}
        MINIMUM_GREEN: 80
        MINIMUM_ORANGE: 70
